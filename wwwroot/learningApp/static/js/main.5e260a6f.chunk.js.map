{"version":3,"sources":["interfaces.ts","components/Settings.tsx","components/ProgressBar.tsx","components/Card.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Scope","Direction","scopes","text","All","value","HighLevel","LowLevel","five","four","three","two","one","zero","Settings","props","options","saveOptions","useState","editedOptions","setEditedOptions","open","setOpen","saveBtnEnabled","scope","direction","isLearned","onCancel","className","onClick","SettingOutlined","title","visible","footer","type","disabled","Item","label","onChange","map","s","Option","Group","e","target","Button","random","toRus","toEng","checked","ProgressBar","progress","strokeColor","showInfo","percent","status","initStatistic","up","down","noChange","Card","words","openSession","closeSession","defLanguage","Math","currentWord","setCurrentWord","repeatedWords","setRepeatedWords","statistic","setStatistic","language","setLanguage","setProgress","useEffect","length","notification","warning","message","close","undefined","setNext","shift","handleStatistic","word","points","index","findIndex","w","id","hasStatistic","Boolean","valueStyle","color","prefix","ArrowUpOutlined","MinusOutlined","ArrowDownOutlined","ArrowRightOutlined","src","alt","RightOutlined","LoadingOutlined","App","state","query","axios","then","response","setState","data","loaded","catch","error","description","toString","post","showRus","this","href","ArrowLeftOutlined","CloseCircleOutlined","xs","sm","md","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e260a6f.chunk.js","sourcesContent":["export enum Scope {\n  zero,\n  one,\n  two,\n  three,\n  four,\n  five,\n  All,\n  HighLevel, // 3..5\n  LowLevel, // 0..2\n}\n\nexport enum Direction {\n  toRus,\n  toEng,\n  random,\n}\n\nexport interface IOptions {\n  scope: Scope;\n  direction: Direction;\n  isLearned: boolean;\n}\n\nexport interface IWord {\n  id?: number;\n  rus: string;\n  eng: string;\n  language: string;\n  points: number;\n  isLearned: boolean;\n  userId: number;\n  updatedAt: string | Date;\n}\n\nexport interface IResponse {\n  ok: boolean;\n  data?: any;\n  error?: any;\n}\n","import React, { useState } from 'react';\nimport { Button, Modal, Form, Radio, Select, Checkbox } from 'antd';\nimport { SettingOutlined } from '@ant-design/icons';\n\nimport { Direction, IOptions, Scope } from '../interfaces';\n\ninterface ISettings {\n  options: IOptions;\n  saveOptions: (options: IOptions) => void;\n}\n\nconst scopes: { text: string; value: Scope }[] = [\n  { text: Scope[Scope.All], value: Scope.All },\n  { text: Scope[Scope.HighLevel], value: Scope.HighLevel },\n  { text: Scope[Scope.LowLevel], value: Scope.LowLevel },\n  { text: Scope[Scope.five], value: Scope.five },\n  { text: Scope[Scope.four], value: Scope.four },\n  { text: Scope[Scope.three], value: Scope.three },\n  { text: Scope[Scope.two], value: Scope.two },\n  { text: Scope[Scope.one], value: Scope.one },\n  { text: Scope[Scope.zero], value: Scope.zero },\n];\n\nconst Settings: React.FC<ISettings> = (props: ISettings): JSX.Element => {\n  const { options, saveOptions } = props;\n  const [editedOptions, setEditedOptions] = useState<IOptions>(options);\n  const [open, setOpen] = useState<boolean>(false);\n  const saveBtnEnabled =\n    editedOptions.scope !== options.scope ||\n    editedOptions.direction !== options.direction ||\n    editedOptions.isLearned !== options.isLearned;\n\n  const onChangeScope = (value: any) => {\n    setEditedOptions({ ...editedOptions, scope: value });\n  };\n\n  const onChangeDirection = (e: any) => {\n    setEditedOptions({ ...editedOptions, direction: e.target.value });\n  };\n\n  const onChangeLearned = (e: any) => {\n    setEditedOptions({ ...editedOptions, isLearned: e.target.checked });\n  };\n\n  const onCancel = () => {\n    setEditedOptions(options);\n    setOpen(false);\n  };\n\n  const onSave = () => {\n    saveOptions(editedOptions);\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <div className=\"settingsIconWrapper\" onClick={() => setOpen(!open)}>\n        <SettingOutlined />\n      </div>\n      <Modal\n        title=\"Settings\"\n        visible={open}\n        onCancel={onCancel}\n        footer={[\n          <Button key=\"save\" type=\"primary\" onClick={onSave} disabled={!saveBtnEnabled}>\n            Save\n          </Button>,\n          <Button key=\"cancel\" onClick={onCancel}>\n            Cancel\n          </Button>,\n        ]}\n      >\n        <>\n          <Form.Item label=\"Scope\">\n            <Select value={editedOptions.scope} onChange={onChangeScope}>\n              {scopes.map((s) => (\n                <Select.Option key={s.value} value={s.value}>\n                  {s.text}\n                </Select.Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Translation direction\">\n            <Radio.Group value={editedOptions.direction} onChange={onChangeDirection}>\n              <Radio.Button value={Direction.random}>random</Radio.Button>\n              <Radio.Button value={Direction.toRus}>to russian</Radio.Button>\n              <Radio.Button value={Direction.toEng}>to foreign</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item>\n            <Checkbox checked={editedOptions.isLearned} onChange={onChangeLearned}>\n              Show only learned words\n            </Checkbox>\n          </Form.Item>\n        </>\n      </Modal>\n    </>\n  );\n};\n\nexport default Settings;\n","import React from 'react';\nimport { Progress } from 'antd';\n\ninterface IProgressBar {\n  progress: number;\n}\n\nconst ProgressBar: React.FC<IProgressBar> = ({ progress }: IProgressBar): JSX.Element => {\n  return (\n    <div className=\"progress\">\n      <Progress\n        strokeColor={{\n          '0%': '#108ee9',\n          '100%': '#87d068',\n        }}\n        showInfo={false}\n        percent={progress}\n        status=\"active\"\n      />\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useEffect, useState } from 'react';\nimport { Badge, Button, notification, Statistic } from 'antd';\nimport {\n  RightOutlined,\n  ArrowUpOutlined,\n  ArrowDownOutlined,\n  ArrowRightOutlined,\n  MinusOutlined,\n  LoadingOutlined,\n} from '@ant-design/icons';\n\nimport ProgressBar from './ProgressBar';\nimport { IWord, Direction } from '../interfaces';\n\ntype Statistic = {\n  up: number;\n  noChange: number;\n  down: number;\n};\n\ntype Shift = 1 | -1 | 0;\n\nconst initStatistic: Statistic = {\n  up: 0,\n  down: 0,\n  noChange: 0,\n};\n\ntype Language = 'rus' | 'eng';\n\ninterface ICard {\n  words: IWord[] | null;\n  openSession: () => void;\n  closeSession: (words: IWord[]) => void;\n  direction: Direction;\n}\n\nconst Card: React.FC<ICard> = ({ words, openSession, closeSession, direction }: ICard): JSX.Element => {\n  const defLanguage = () => {\n    if (direction === Direction.random) return Math.random() > 0.5 ? 'rus' : 'eng';\n    return direction === Direction.toEng ? 'rus' : 'eng';\n  };\n\n  const [currentWord, setCurrentWord] = useState<IWord>();\n  const [repeatedWords, setRepeatedWords] = useState<IWord[]>([]);\n  const [statistic, setStatistic] = useState<Statistic>(initStatistic);\n  const [language, setLanguage] = useState<Language>(defLanguage());\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (words?.length) {\n      setCurrentWord(words[0]);\n      setStatistic(initStatistic);\n      setProgress(0);\n    } else if (words) {\n      notification.warning({ message: 'No words loaded' });\n      setProgress(0);\n    }\n  }, [words]);\n\n  const close = () => {\n    setProgress(100);\n    closeSession(repeatedWords);\n    setCurrentWord(undefined);\n    setRepeatedWords([]);\n  };\n\n  const handleStatistic = (shift: Shift) => {\n    switch (shift) {\n      case 1:\n        return setStatistic({ ...statistic, up: statistic.up + 1 });\n      case -1:\n        return setStatistic({ ...statistic, down: statistic.down + 1 });\n      case 0:\n        return setStatistic({ ...statistic, noChange: statistic.noChange + 1 });\n    }\n  };\n\n  const setNext = (shift: Shift) => {\n    if (!words || !currentWord) return;\n\n    handleStatistic(shift);\n    const word: IWord = { ...currentWord };\n    word.points += shift;\n    if (word.points > 5) word.points = 5;\n    else if (word.points < 0) word.points = 0;\n    setRepeatedWords([...repeatedWords, word]);\n    const index = words.findIndex((w) => w.id === word.id);\n    if (index === words.length - 1) close();\n    else {\n      setCurrentWord(words[index + 1]);\n      setLanguage(defLanguage);\n      setProgress(((index + 1) / words.length) * 100);\n    }\n  };\n\n  const hasStatistic = Boolean(statistic.up || statistic.down || statistic.noChange);\n\n  if (words === null)\n    return (\n      <div className={`card card-${hasStatistic ? '3-lines' : '1-line'}`}>\n        {hasStatistic && (\n          <>\n            <ProgressBar progress={progress} />\n            <h2>Session statistic</h2>\n            <div className=\"stat\">\n              <div className=\"stat-item\">\n                <Statistic\n                  title=\"Successfully repeated\"\n                  value={statistic.up}\n                  valueStyle={{ color: '#3f8600' }}\n                  prefix={<ArrowUpOutlined />}\n                />\n              </div>\n              <div className=\"stat-item\">\n                <Statistic\n                  title=\"Not changed\"\n                  value={statistic.noChange}\n                  valueStyle={{ color: '#666666' }}\n                  prefix={<MinusOutlined />}\n                />\n              </div>\n              <div className=\"stat-item\">\n                <Statistic\n                  title=\"Forgotten\"\n                  value={statistic.down}\n                  valueStyle={{ color: '#cf1322' }}\n                  prefix={<ArrowDownOutlined />}\n                />\n              </div>\n            </div>\n          </>\n        )}\n        <Button type=\"primary\" onClick={openSession}>\n          Start new session\n        </Button>\n      </div>\n    );\n\n  if (words.length === 0)\n    return (\n      <div className=\"card card-1-line\">\n        <div>\n          <p>No words according to the current settings</p>\n        </div>\n        <Button onClick={close}>Go back</Button>\n      </div>\n    );\n\n  if (currentWord)\n    return (\n      <div className=\"card card-3-lines\">\n        <ProgressBar progress={progress} />\n        <div className=\"word-info\">\n          <span>{currentWord.points}/5</span>\n          <div className=\"direction\">\n            {language === 'rus' && <ArrowRightOutlined />}\n            <img src={currentWord.language === 'en' ? '/learningApp/en.png' : '/learningApp/fr.png'} alt=\"flag\" />\n            {language === 'eng' && <ArrowRightOutlined />}\n          </div>\n          <Badge color={currentWord.isLearned ? 'green' : 'orange'} />\n        </div>\n        <div className=\"word\" onClick={() => setLanguage(language === 'eng' ? 'rus' : 'eng')}>\n          {currentWord[language]}\n        </div>\n        <div className=\"btns\">\n          <Button onClick={() => setNext(-1)}>\n            <ArrowDownOutlined />\n          </Button>\n          <Button onClick={() => setNext(0)}>\n            <RightOutlined />\n          </Button>\n          <Button onClick={() => setNext(1)}>\n            <ArrowUpOutlined />\n          </Button>\n        </div>\n      </div>\n    );\n\n  return (\n    <div className=\"card card-1-line\">\n      <ProgressBar progress={progress} />\n      <LoadingOutlined />\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { notification, Row, Col } from 'antd';\nimport { CloseCircleOutlined, ArrowLeftOutlined } from '@ant-design/icons';\n\nimport Settings from './Settings';\nimport Card from './Card';\nimport { IOptions, Scope, Direction, IWord } from '../interfaces';\n\ninterface IAppState {\n  showRus: boolean;\n  options: IOptions;\n  words: IWord[] | null;\n  loaded: boolean;\n}\n\nclass App extends Component<Record<string, unknown>, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      showRus: true,\n      options: {\n        scope: Scope.All,\n        direction: Direction.random,\n        isLearned: false,\n      },\n      words: null,\n      loaded: false,\n    };\n  }\n\n  private openSession = () => {\n    const { scope, isLearned } = this.state.options;\n    const query = `/learning/open_session?${isLearned ? 'isLearned=true' : `scope=${Scope[scope]}`}`;\n    axios(query)\n      .then((response) => {\n        this.setState({ words: response.data.words, loaded: true });\n      })\n      .catch((e) => {\n        notification.error({ message: 'Error', description: e.toString() });\n      });\n  };\n\n  private closeSession = (words: IWord[]) => {\n    axios\n      .post('/learning/close_session', { words })\n      .then((response) => {\n        if (response.status === 200) {\n          this.setState({ loaded: false, words: null });\n        }\n      })\n      .catch((e) => {\n        notification.error({ message: 'Error', description: e.toString() });\n      });\n  };\n\n  render() {\n    const { openSession, closeSession } = this;\n    const { options, loaded, words } = this.state;\n\n    return (\n      <>\n        <div className=\"header\">\n          <a href=\"/\">\n            <ArrowLeftOutlined />\n          </a>\n          {loaded && words ? (\n            <CloseCircleOutlined onClick={() => closeSession([])} />\n          ) : (\n            <Settings options={options} saveOptions={(options) => this.setState({ options })} />\n          )}\n        </div>\n        <Row>\n          <Col xs={0} sm={1} md={6}></Col>\n          <Col xs={24} sm={22} md={12}>\n            <Card words={words} openSession={openSession} closeSession={closeSession} direction={options.direction} />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}